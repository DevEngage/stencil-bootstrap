/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';

import {
  Modifiers,
  Placement,
} from 'popper.js';
import {
  ISTBProgress,
} from './components/progress/progress';
import {
  RouterHistory,
} from '@stencil/router';

declare global {

  namespace StencilComponents {
    interface StbAlert {
      'closeSelector': string;
      'context': string;
    }
  }

  interface HTMLStbAlertElement extends StencilComponents.StbAlert, HTMLStencilElement {}

  var HTMLStbAlertElement: {
    prototype: HTMLStbAlertElement;
    new (): HTMLStbAlertElement;
  };
  interface HTMLElementTagNameMap {
    'stb-alert': HTMLStbAlertElement;
  }
  interface ElementTagNameMap {
    'stb-alert': HTMLStbAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-alert': JSXElements.StbAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface StbAlertAttributes extends HTMLAttributes {
      'closeSelector'?: string;
      'context'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbCard {

    }
  }

  interface HTMLStbCardElement extends StencilComponents.StbCard, HTMLStencilElement {}

  var HTMLStbCardElement: {
    prototype: HTMLStbCardElement;
    new (): HTMLStbCardElement;
  };
  interface HTMLElementTagNameMap {
    'stb-card': HTMLStbCardElement;
  }
  interface ElementTagNameMap {
    'stb-card': HTMLStbCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-card': JSXElements.StbCardAttributes;
    }
  }
  namespace JSXElements {
    export interface StbCardAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbCarousel {
      'cycleType': string | boolean;
      'hide': (index?: number) => void;
      'indicatorSelector': string;
      'interval': number;
      'next': () => void;
      'nextSelector': string;
      'pause': () => void;
      'play': () => void;
      'prev': () => void;
      'prevSelector': string;
      'ride': boolean;
      'selected': number;
      'show': (index?: number) => void;
      'slideSelector': string;
      'wrap': boolean;
    }
  }

  interface HTMLStbCarouselElement extends StencilComponents.StbCarousel, HTMLStencilElement {}

  var HTMLStbCarouselElement: {
    prototype: HTMLStbCarouselElement;
    new (): HTMLStbCarouselElement;
  };
  interface HTMLElementTagNameMap {
    'stb-carousel': HTMLStbCarouselElement;
  }
  interface ElementTagNameMap {
    'stb-carousel': HTMLStbCarouselElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-carousel': JSXElements.StbCarouselAttributes;
    }
  }
  namespace JSXElements {
    export interface StbCarouselAttributes extends HTMLAttributes {
      'cycleType'?: string | boolean;
      'indicatorSelector'?: string;
      'interval'?: number;
      'nextSelector'?: string;
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'prevSelector'?: string;
      'ride'?: boolean;
      'selected'?: number;
      'slideSelector'?: string;
      'wrap'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbCollapse {
      'accordion': boolean;
      'active': boolean;
      'activeClass': string;
      'hide': (element: any) => void;
      'show': (element: any) => void;
    }
  }

  interface HTMLStbCollapseElement extends StencilComponents.StbCollapse, HTMLStencilElement {}

  var HTMLStbCollapseElement: {
    prototype: HTMLStbCollapseElement;
    new (): HTMLStbCollapseElement;
  };
  interface HTMLElementTagNameMap {
    'stb-collapse': HTMLStbCollapseElement;
  }
  interface ElementTagNameMap {
    'stb-collapse': HTMLStbCollapseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-collapse': JSXElements.StbCollapseAttributes;
    }
  }
  namespace JSXElements {
    export interface StbCollapseAttributes extends HTMLAttributes {
      'accordion'?: boolean;
      'active'?: boolean;
      'activeClass'?: string;
      'onHideEvent'?: (event: CustomEvent) => void;
      'onShowEvent'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbDropdown {
      'action': string;
      'disabled': boolean;
      'hide': () => void;
      'modifiers': Modifiers;
      'onlyOneOpen': boolean;
      'placement': Placement;
      'positionFixed': boolean;
      'show': () => void;
      'target': string;
      'toggle': () => void;
    }
  }

  interface HTMLStbDropdownElement extends StencilComponents.StbDropdown, HTMLStencilElement {}

  var HTMLStbDropdownElement: {
    prototype: HTMLStbDropdownElement;
    new (): HTMLStbDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'stb-dropdown': HTMLStbDropdownElement;
  }
  interface ElementTagNameMap {
    'stb-dropdown': HTMLStbDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-dropdown': JSXElements.StbDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface StbDropdownAttributes extends HTMLAttributes {
      'action'?: string;
      'disabled'?: boolean;
      'modifiers'?: Modifiers;
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'onlyOneOpen'?: boolean;
      'placement'?: Placement;
      'positionFixed'?: boolean;
      'target'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbModal {
      'hide': (reason?: any) => void;
      'ignoreBackdropClick': boolean;
      'keyboard': boolean;
      'options': any;
      'show': (relatedTarget?: any) => void;
      'toggle': (relatedTarget: any) => void;
    }
  }

  interface HTMLStbModalElement extends StencilComponents.StbModal, HTMLStencilElement {}

  var HTMLStbModalElement: {
    prototype: HTMLStbModalElement;
    new (): HTMLStbModalElement;
  };
  interface HTMLElementTagNameMap {
    'stb-modal': HTMLStbModalElement;
  }
  interface ElementTagNameMap {
    'stb-modal': HTMLStbModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-modal': JSXElements.StbModalAttributes;
    }
  }
  namespace JSXElements {
    export interface StbModalAttributes extends HTMLAttributes {
      'ignoreBackdropClick'?: boolean;
      'keyboard'?: boolean;
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'options'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbNav {
      'hide': (index?: number) => void;
      'panelSelector': string;
      'selected': number;
      'show': (index?: number) => void;
      'tabSelector': string;
      'toggle': () => void;
    }
  }

  interface HTMLStbNavElement extends StencilComponents.StbNav, HTMLStencilElement {}

  var HTMLStbNavElement: {
    prototype: HTMLStbNavElement;
    new (): HTMLStbNavElement;
  };
  interface HTMLElementTagNameMap {
    'stb-nav': HTMLStbNavElement;
  }
  interface ElementTagNameMap {
    'stb-nav': HTMLStbNavElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-nav': JSXElements.StbNavAttributes;
    }
  }
  namespace JSXElements {
    export interface StbNavAttributes extends HTMLAttributes {
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'panelSelector'?: string;
      'selected'?: number;
      'tabSelector'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPagination {
      'next': () => void;
      'nextSelector': string;
      'pagesSelector': string;
      'prev': () => void;
      'prevSelector': string;
      'select': (index?: number) => void;
      'selected': number;
    }
  }

  interface HTMLStbPaginationElement extends StencilComponents.StbPagination, HTMLStencilElement {}

  var HTMLStbPaginationElement: {
    prototype: HTMLStbPaginationElement;
    new (): HTMLStbPaginationElement;
  };
  interface HTMLElementTagNameMap {
    'stb-pagination': HTMLStbPaginationElement;
  }
  interface ElementTagNameMap {
    'stb-pagination': HTMLStbPaginationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-pagination': JSXElements.StbPaginationAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPaginationAttributes extends HTMLAttributes {
      'nextSelector'?: string;
      'onOnSelect'?: (event: CustomEvent) => void;
      'pagesSelector'?: string;
      'prevSelector'?: string;
      'selected'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPopover {
      'action': string;
      'disabled': boolean;
      'hide': () => void;
      'modifiers': Modifiers;
      'onlyOneOpen': boolean;
      'positionFixed': boolean;
      'show': () => void;
      'target': string;
      'toggle': () => void;
    }
  }

  interface HTMLStbPopoverElement extends StencilComponents.StbPopover, HTMLStencilElement {}

  var HTMLStbPopoverElement: {
    prototype: HTMLStbPopoverElement;
    new (): HTMLStbPopoverElement;
  };
  interface HTMLElementTagNameMap {
    'stb-popover': HTMLStbPopoverElement;
  }
  interface ElementTagNameMap {
    'stb-popover': HTMLStbPopoverElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-popover': JSXElements.StbPopoverAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPopoverAttributes extends HTMLAttributes {
      'action'?: string;
      'disabled'?: boolean;
      'modifiers'?: Modifiers;
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'onlyOneOpen'?: boolean;
      'positionFixed'?: boolean;
      'target'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbProgress {
      'classes': string;
      'current': number | ISTBProgress | ISTBProgress[];
      'max': number;
      'min': number;
      'title': string;
    }
  }

  interface HTMLStbProgressElement extends StencilComponents.StbProgress, HTMLStencilElement {}

  var HTMLStbProgressElement: {
    prototype: HTMLStbProgressElement;
    new (): HTMLStbProgressElement;
  };
  interface HTMLElementTagNameMap {
    'stb-progress': HTMLStbProgressElement;
  }
  interface ElementTagNameMap {
    'stb-progress': HTMLStbProgressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-progress': JSXElements.StbProgressAttributes;
    }
  }
  namespace JSXElements {
    export interface StbProgressAttributes extends HTMLAttributes {
      'classes'?: string;
      'current'?: number | ISTBProgress | ISTBProgress[];
      'max'?: number;
      'min'?: number;
      'title'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbToggle {
      'activate': (index?: number) => void;
      'deactivate': (index?: number) => void;
      'selected': number;
      'target': string;
      'toggle': () => void;
    }
  }

  interface HTMLStbToggleElement extends StencilComponents.StbToggle, HTMLStencilElement {}

  var HTMLStbToggleElement: {
    prototype: HTMLStbToggleElement;
    new (): HTMLStbToggleElement;
  };
  interface HTMLElementTagNameMap {
    'stb-toggle': HTMLStbToggleElement;
  }
  interface ElementTagNameMap {
    'stb-toggle': HTMLStbToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-toggle': JSXElements.StbToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface StbToggleAttributes extends HTMLAttributes {
      'onOnActivate'?: (event: CustomEvent) => void;
      'onOnDeactivate'?: (event: CustomEvent) => void;
      'selected'?: number;
      'target'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbTooltip {
      'action': string;
      'disabled': boolean;
      'hide': () => void;
      'modifiers': Modifiers;
      'onlyOneOpen': boolean;
      'positionFixed': boolean;
      'show': () => void;
      'target': string;
      'toggle': () => void;
    }
  }

  interface HTMLStbTooltipElement extends StencilComponents.StbTooltip, HTMLStencilElement {}

  var HTMLStbTooltipElement: {
    prototype: HTMLStbTooltipElement;
    new (): HTMLStbTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'stb-tooltip': HTMLStbTooltipElement;
  }
  interface ElementTagNameMap {
    'stb-tooltip': HTMLStbTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-tooltip': JSXElements.StbTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface StbTooltipAttributes extends HTMLAttributes {
      'action'?: string;
      'disabled'?: boolean;
      'modifiers'?: Modifiers;
      'onOnHide'?: (event: CustomEvent) => void;
      'onOnShow'?: (event: CustomEvent) => void;
      'onlyOneOpen'?: boolean;
      'positionFixed'?: boolean;
      'target'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbDocumentationApi {
      'api': any;
      'details': string;
      'language': string;
      'stbTitle': string;
      'type': string;
    }
  }

  interface HTMLStbDocumentationApiElement extends StencilComponents.StbDocumentationApi, HTMLStencilElement {}

  var HTMLStbDocumentationApiElement: {
    prototype: HTMLStbDocumentationApiElement;
    new (): HTMLStbDocumentationApiElement;
  };
  interface HTMLElementTagNameMap {
    'stb-documentation-api': HTMLStbDocumentationApiElement;
  }
  interface ElementTagNameMap {
    'stb-documentation-api': HTMLStbDocumentationApiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-documentation-api': JSXElements.StbDocumentationApiAttributes;
    }
  }
  namespace JSXElements {
    export interface StbDocumentationApiAttributes extends HTMLAttributes {
      'api'?: any;
      'details'?: string;
      'language'?: string;
      'stbTitle'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbCode {
      'language': string;
    }
  }

  interface HTMLStbCodeElement extends StencilComponents.StbCode, HTMLStencilElement {}

  var HTMLStbCodeElement: {
    prototype: HTMLStbCodeElement;
    new (): HTMLStbCodeElement;
  };
  interface HTMLElementTagNameMap {
    'stb-code': HTMLStbCodeElement;
  }
  interface ElementTagNameMap {
    'stb-code': HTMLStbCodeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-code': JSXElements.StbCodeAttributes;
    }
  }
  namespace JSXElements {
    export interface StbCodeAttributes extends HTMLAttributes {
      'language'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageAlerts {

    }
  }

  interface HTMLStbPageAlertsElement extends StencilComponents.StbPageAlerts, HTMLStencilElement {}

  var HTMLStbPageAlertsElement: {
    prototype: HTMLStbPageAlertsElement;
    new (): HTMLStbPageAlertsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-alerts': HTMLStbPageAlertsElement;
  }
  interface ElementTagNameMap {
    'stb-page-alerts': HTMLStbPageAlertsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-alerts': JSXElements.StbPageAlertsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageAlertsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageCard {

    }
  }

  interface HTMLStbPageCardElement extends StencilComponents.StbPageCard, HTMLStencilElement {}

  var HTMLStbPageCardElement: {
    prototype: HTMLStbPageCardElement;
    new (): HTMLStbPageCardElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-card': HTMLStbPageCardElement;
  }
  interface ElementTagNameMap {
    'stb-page-card': HTMLStbPageCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-card': JSXElements.StbPageCardAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageCardAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageCarousels {

    }
  }

  interface HTMLStbPageCarouselsElement extends StencilComponents.StbPageCarousels, HTMLStencilElement {}

  var HTMLStbPageCarouselsElement: {
    prototype: HTMLStbPageCarouselsElement;
    new (): HTMLStbPageCarouselsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-carousels': HTMLStbPageCarouselsElement;
  }
  interface ElementTagNameMap {
    'stb-page-carousels': HTMLStbPageCarouselsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-carousels': JSXElements.StbPageCarouselsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageCarouselsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageCollapses {

    }
  }

  interface HTMLStbPageCollapsesElement extends StencilComponents.StbPageCollapses, HTMLStencilElement {}

  var HTMLStbPageCollapsesElement: {
    prototype: HTMLStbPageCollapsesElement;
    new (): HTMLStbPageCollapsesElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-collapses': HTMLStbPageCollapsesElement;
  }
  interface ElementTagNameMap {
    'stb-page-collapses': HTMLStbPageCollapsesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-collapses': JSXElements.StbPageCollapsesAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageCollapsesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageComponents {

    }
  }

  interface HTMLStbPageComponentsElement extends StencilComponents.StbPageComponents, HTMLStencilElement {}

  var HTMLStbPageComponentsElement: {
    prototype: HTMLStbPageComponentsElement;
    new (): HTMLStbPageComponentsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-components': HTMLStbPageComponentsElement;
  }
  interface ElementTagNameMap {
    'stb-page-components': HTMLStbPageComponentsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-components': JSXElements.StbPageComponentsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageComponentsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageDropdowns {

    }
  }

  interface HTMLStbPageDropdownsElement extends StencilComponents.StbPageDropdowns, HTMLStencilElement {}

  var HTMLStbPageDropdownsElement: {
    prototype: HTMLStbPageDropdownsElement;
    new (): HTMLStbPageDropdownsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-dropdowns': HTMLStbPageDropdownsElement;
  }
  interface ElementTagNameMap {
    'stb-page-dropdowns': HTMLStbPageDropdownsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-dropdowns': JSXElements.StbPageDropdownsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageDropdownsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageModals {

    }
  }

  interface HTMLStbPageModalsElement extends StencilComponents.StbPageModals, HTMLStencilElement {}

  var HTMLStbPageModalsElement: {
    prototype: HTMLStbPageModalsElement;
    new (): HTMLStbPageModalsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-modals': HTMLStbPageModalsElement;
  }
  interface ElementTagNameMap {
    'stb-page-modals': HTMLStbPageModalsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-modals': JSXElements.StbPageModalsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageModalsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageNavs {

    }
  }

  interface HTMLStbPageNavsElement extends StencilComponents.StbPageNavs, HTMLStencilElement {}

  var HTMLStbPageNavsElement: {
    prototype: HTMLStbPageNavsElement;
    new (): HTMLStbPageNavsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-navs': HTMLStbPageNavsElement;
  }
  interface ElementTagNameMap {
    'stb-page-navs': HTMLStbPageNavsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-navs': JSXElements.StbPageNavsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageNavsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPagePaginations {

    }
  }

  interface HTMLStbPagePaginationsElement extends StencilComponents.StbPagePaginations, HTMLStencilElement {}

  var HTMLStbPagePaginationsElement: {
    prototype: HTMLStbPagePaginationsElement;
    new (): HTMLStbPagePaginationsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-paginations': HTMLStbPagePaginationsElement;
  }
  interface ElementTagNameMap {
    'stb-page-paginations': HTMLStbPagePaginationsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-paginations': JSXElements.StbPagePaginationsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPagePaginationsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPagePopovers {

    }
  }

  interface HTMLStbPagePopoversElement extends StencilComponents.StbPagePopovers, HTMLStencilElement {}

  var HTMLStbPagePopoversElement: {
    prototype: HTMLStbPagePopoversElement;
    new (): HTMLStbPagePopoversElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-popovers': HTMLStbPagePopoversElement;
  }
  interface ElementTagNameMap {
    'stb-page-popovers': HTMLStbPagePopoversElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-popovers': JSXElements.StbPagePopoversAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPagePopoversAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageProgressBars {

    }
  }

  interface HTMLStbPageProgressBarsElement extends StencilComponents.StbPageProgressBars, HTMLStencilElement {}

  var HTMLStbPageProgressBarsElement: {
    prototype: HTMLStbPageProgressBarsElement;
    new (): HTMLStbPageProgressBarsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-progress-bars': HTMLStbPageProgressBarsElement;
  }
  interface ElementTagNameMap {
    'stb-page-progress-bars': HTMLStbPageProgressBarsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-progress-bars': JSXElements.StbPageProgressBarsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageProgressBarsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageToggles {

    }
  }

  interface HTMLStbPageTogglesElement extends StencilComponents.StbPageToggles, HTMLStencilElement {}

  var HTMLStbPageTogglesElement: {
    prototype: HTMLStbPageTogglesElement;
    new (): HTMLStbPageTogglesElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-toggles': HTMLStbPageTogglesElement;
  }
  interface ElementTagNameMap {
    'stb-page-toggles': HTMLStbPageTogglesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-toggles': JSXElements.StbPageTogglesAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageTogglesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StbPageTooltips {

    }
  }

  interface HTMLStbPageTooltipsElement extends StencilComponents.StbPageTooltips, HTMLStencilElement {}

  var HTMLStbPageTooltipsElement: {
    prototype: HTMLStbPageTooltipsElement;
    new (): HTMLStbPageTooltipsElement;
  };
  interface HTMLElementTagNameMap {
    'stb-page-tooltips': HTMLStbPageTooltipsElement;
  }
  interface ElementTagNameMap {
    'stb-page-tooltips': HTMLStbPageTooltipsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stb-page-tooltips': JSXElements.StbPageTooltipsAttributes;
    }
  }
  namespace JSXElements {
    export interface StbPageTooltipsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHome {

    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyApp {
      'history': RouterHistory;
    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;